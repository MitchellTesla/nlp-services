commands:
  build_and_deploy:
    description: "Build/Test and Deploy SingularityNET Services"
    parameters:
      domain:
        type: string
        default: ""
      ssh_user_env_var:
        type: string
        default: ""
      ssh_host_env_var:
        type: string
        default: ""
      infura_api_key:
        type: string
        default: ""
      daemon_pk:
        type: string
        default: ""
      docker_nvidia:
        type: boolean
        default: false
      docker_image_name:
        type: string
        default: ""
      docker_container_name:
        type: string
        default: ""
      docker_etcd_host_dir:
        type: string
        default: ""
      docker_etcd_container_dir:
        type: string
        default: ""
      docker_mount_volumes:
        type: boolean
        default: false
      docker_mount_src:
        type: string
        default: ""
      docker_mount_dest:
        type: string
        default: ""
    steps:
      - run:
          name: Setting Up
          command: |
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo "Setting Up..."
            echo $(.circleci/check_md5.sh) >> docker_rebuild
            echo "FILES_CHANGED=$(cat docker_rebuild)"

      - run:
          name: Removing old Docker Container (Previous Builds)
          command: |
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo "Removing old Container (from previous builds)..."
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
              docker rm ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
            EOF

      - run:
          name: Building
          command: |
            echo "=========================================== Build Configs ==========================================="
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_NVIDIA=<< parameters.docker_nvidia >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_MOUNT_VOLUMES=<< parameters.docker_mount_volumes >>
            export DOCKER_MOUNT_SRC=<< parameters.docker_mount_src >>
            export DOCKER_MOUNT_DEST=<< parameters.docker_mount_dest >>
            export ETCD_HOST_DIR=<< parameters.docker_etcd_host_dir >>
            export ETCD_CONTAINER_DIR=<< parameters.docker_etcd_container_dir >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo            git_user  : ${CIRCLE_PROJECT_USERNAME}
            echo            git_repo  : ${CIRCLE_PROJECT_REPONAME}
            echo            git_branch: ${CIRCLE_BRANCH}
            echo         snetd_version: ${CI_SNETD_VERSION}
            echo SSH_USER             : ${SSH_USER}
            echo SSH_HOST             : ${SSH_HOST}
            echo DOCKER_NOCACHE       : ${DOCKER_NOCACHE}
            echo DOCKER_NVIDIA        : ${DOCKER_NVIDIA}
            echo DOCKER_IMAGE_NAME    : ${DOCKER_IMAGE_NAME}
            echo DOCKER_CONTAINER_NAME: ${DOCKER_CONTAINER_NAME}
            echo DOCKER_MOUNT_VOLUMES : ${DOCKER_MOUNT_VOLUMES}
            echo DOCKER_MOUNT_SRC     : ${DOCKER_MOUNT_SRC}
            echo DOCKER_MOUNT_DEST    : ${DOCKER_MOUNT_DEST}
            echo "====================================================================================================="
            DOCKER_IMAGE_EXISTS=`ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} docker images -q ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME}`
            FILES_CHANGED=`cat docker_rebuild`
            echo DOCKER_IMAGE_EXISTS=${DOCKER_IMAGE_EXISTS}
            echo FILES_CHANGED=${FILES_CHANGED}
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              if [ "$DOCKER_IMAGE_EXISTS" = "" ] || [ "$FILES_CHANGED" != 0 ]; then
                echo "Building..."
                docker build \
                  --build-arg git_owner=${CIRCLE_PROJECT_USERNAME} \
                  --build-arg git_repo=${CIRCLE_PROJECT_REPONAME} \
                  --build-arg git_branch=${CIRCLE_BRANCH} \
                  $([ "${CI_SNETD_VERSION}" ] && echo "--build-arg snetd_version=${CI_SNETD_VERSION}" || echo "") \
                  $([ "${DOCKER_NOCACHE}" = "true" ] && echo "--no-cache" || echo "") \
                  -t ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME} https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/${SERVICE_DIR}/Dockerfile
              else
                echo "Not Building..."
              fi
            EOF

      - run:
          name: Running new Docker Container
          command: |
            echo "============================================ Run Configs ============================================"
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export INFURA_API_KEY=<< parameters.infura_api_key >>
            export PVT_KEY_FOR_METERING=<< parameters.daemon_pk >>
            export DOCKER_NVIDIA=<< parameters.docker_nvidia >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_MOUNT_VOLUMES=<< parameters.docker_mount_volumes >>
            export DOCKER_MOUNT_SRC=<< parameters.docker_mount_src >>
            export DOCKER_MOUNT_DEST=<< parameters.docker_mount_dest >>
            export ETCD_HOST_DIR=<< parameters.docker_etcd_host_dir >>
            export ETCD_CONTAINER_DIR=<< parameters.docker_etcd_container_dir >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo            git_user  : ${CIRCLE_PROJECT_USERNAME}
            echo            git_repo  : ${CIRCLE_PROJECT_REPONAME}
            echo            git_branch: ${CIRCLE_BRANCH}
            echo SSH_USER             : ${SSH_USER}
            echo SSH_HOST             : ${SSH_HOST}
            echo DOCKER_NOCACHE       : ${DOCKER_NOCACHE}
            echo DOCKER_NVIDIA        : ${DOCKER_NVIDIA}
            echo DOCKER_IMAGE_NAME    : ${DOCKER_IMAGE_NAME}
            echo DOCKER_CONTAINER_NAME: ${DOCKER_CONTAINER_NAME}
            echo DOCKER_MOUNT_VOLUMES : ${DOCKER_MOUNT_VOLUMES}
            echo DOCKER_MOUNT_SRC     : ${DOCKER_MOUNT_SRC}
            echo DOCKER_MOUNT_DEST    : ${DOCKER_MOUNT_DEST}
            echo "====================================================================================================="
            echo "Running new Container..."
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<<-EOF
                  docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME} || true
                  docker rename ${PROD_TAG}${DOCKER_CONTAINER_NAME} ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
                  docker run \
                  $([ "${DOCKER_NVIDIA}" = "true" ] && echo "--runtime=nvidia" || echo "") \
                  --name ${PROD_TAG}${DOCKER_CONTAINER_NAME} \
                  --restart unless-stopped \
                  -e INFURA_API_KEY=${INFURA_API_KEY} \
                  -e PVT_KEY_FOR_METERING=${PVT_KEY_FOR_METERING} \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-p ${SNETD_PORT_MAINNET}:${SNETD_PORT_MAINNET}" || echo "") \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-p ${SNETD_PORT_ROPSTEN}:${SNETD_PORT_ROPSTEN}" || echo "") \
                  -v ~/${CERTS_DIR}:/opt/singnet/.certs \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-v ~/${ETCD_HOST_DIR}:/${ETCD_CONTAINER_DIR}" || echo "") \
                  $([ "${DOCKER_MOUNT_VOLUMES}" = "true" ] && echo "-v ${DOCKER_MOUNT_SRC}:${DOCKER_MOUNT_DEST}" || echo "") \
                  -tdi ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME} \
                  bash -c "git fetch;git checkout ${CIRCLE_BRANCH};git pull;sh buildproto.sh;${SERVICE_RUN_COMMAND}"
            EOF

      - run:
          name: Testing local
          no_output_timeout: 60m
          command: |
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              docker exec -i ${PROD_TAG}${DOCKER_CONTAINER_NAME} bash -c "${SERVICE_TEST_COMMAND}"
            EOF

version: 2.1
jobs:
  cntk-language-understanding:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: cntk-language-understanding
      SERVICE_DIR: cntk-language-understanding
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: source '/cntk/activate-cntk';python run_service.py --ssl --metering
      SERVICE_TEST_COMMAND: sleep 20;source '/cntk/activate-cntk';python test_service.py auto
      SNETD_PORT_MAINNET: 7048
      SNETD_PORT_ROPSTEN: 7068
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_CNTK_LANGUAGE_UNDERSTANDING}
          ssh_user_env_var: ${MAINNET_SSH_USER_CNTK_LANGUAGE_UDERSTANDING}
          ssh_host_env_var: ${MAINNET_SSH_HOST_CNTK_LANGUAGE_UDERSTANDING}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_CNTK_LANGUAGE_UNDERSTANDING}
          docker_nvidia: true
          docker_image_name: cntk_language_understanding
          docker_container_name: CNTK_LANGUAGE_UNDERSTANDING
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  named-entity-recognition:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: named-entity-recognition
      SERVICE_DIR: named-entity-recognition
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_service.py --ssl --metering
      SERVICE_TEST_COMMAND: sleep 20;cd tests;pytest
      SNETD_PORT_MAINNET: 7047
      SNETD_PORT_ROPSTEN: 7014
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_NAMED_ENTITY_RECOGNITION}
          ssh_user_env_var: ${MAINNET_SSH_USER_NAMED_ENTITY_RECOGNITION}
          ssh_host_env_var: ${MAINNET_SSH_HOST_NAMED_ENTITY_RECOGNITION}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_NAMED_ENTITY_RECOGNITION}
          docker_image_name: named_entity_recognition
          docker_container_name: NAMED_ENTITY_RECOGNITION
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  opennmt-romance-translator:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: opennmt-romance-translator
      SERVICE_DIR: opennmt-romance-translator
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_service.py --ssl --metering
      SERVICE_TEST_COMMAND: sleep 20;python3 test_service.py auto
      SNETD_PORT_MAINNET: 7049
      SNETD_PORT_ROPSTEN: 7069
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_OPENNMT_ROMANCE_TRANSLATOR}
          ssh_user_env_var: ${MAINNET_SSH_USER_OPENNMT_ROMANCE_TRANSLATOR}
          ssh_host_env_var: ${MAINNET_SSH_HOST_OPENNMT_ROMANCE_TRANSLATOR}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_OPENNMT_ROMANCE_TRANSLATOR}
          docker_nvidia: true
          docker_image_name: opennmt_romance_translator
          docker_container_name: OPENNMT_ROMANCE_TRANSLATOR
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  sentiment-analysis:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: sentiment-analysis
      SERVICE_DIR: sentiment-analysis
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_service.py --ssl --metering
      SERVICE_TEST_COMMAND: sleep 20;cd tests;pytest
      SNETD_PORT_MAINNET: 7046
      SNETD_PORT_ROPSTEN: 7013
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_SENTIMENT_ANALYSIS}
          ssh_user_env_var: ${MAINNET_SSH_USER_SENTIMENT_ANALYSIS}
          ssh_host_env_var: ${MAINNET_SSH_HOST_SENTIMENT_ANALYSIS}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_SENTIMENT_ANALYSIS}
          docker_nvidia: true
          docker_image_name: sentiment_analysis
          docker_container_name: SENTIMENT_ANALYSIS
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  text-summarization:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: text-summarization
      SERVICE_DIR: text-summarization
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3.6 run_service.py --ssl --metering
      SERVICE_TEST_COMMAND: sleep 10;python3.6 test_service.py auto
      SNETD_PORT_MAINNET: 6407
      SNETD_PORT_ROPSTEN: 6307
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_TEXT_SUMMARIZATION}
          ssh_user_env_var: ${MAINNET_SSH_USER_TEXT_SUMMARIZATION}
          ssh_host_env_var: ${MAINNET_SSH_HOST_TEXT_SUMMARIZATION}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_TEXT_SUMMARIZATION}
          docker_nvidia: true
          docker_image_name: text_summarization
          docker_container_name: TEXT_SUMMARIZATION
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  translation:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: translation
      SERVICE_DIR: translation
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3.6 run_service.py --ssl --metering
      SERVICE_TEST_COMMAND: sleep 10;python3.6 test_service.py auto
      SNETD_PORT_MAINNET: 6408
      SNETD_PORT_ROPSTEN: 6308
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_TRANSLATION}
          ssh_user_env_var: ${MAINNET_SSH_USER_TRANSLATION}
          ssh_host_env_var: ${MAINNET_SSH_HOST_TRANSLATION}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_TRANSLATION}
          docker_nvidia: true
          docker_image_name: translation
          docker_container_name: TRANSLATION
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

workflows:
  version: 2.1
  build_deploy:
    jobs:
      - cntk-language-understanding
      - named-entity-recognition
      - opennmt-romance-translator
      - sentiment-analysis
      - text-summarization
      - translation
